/* creating user table */
CREATE TABLE USERS 
(
  USERID NUMBER(10, 0) NOT NULL 
, FULLNAME VARCHAR2(30) NOT NULL 
, EMAIL VARCHAR2(30) NOT NULL 
, PASSWORD VARCHAR2(30) NOT NULL 
, CONSTRAINT USERS_PK PRIMARY KEY 
  (
    USERID 
  )
  ENABLE 
);

CREATE SEQUENCE users_id_seq;
 
CREATE TRIGGER user_on_insert
BEFORE INSERT ON users
FOR EACH ROW
BEGIN
  SELECT users_id_seq.nextval
  INTO :new.userid
  FROM dual;
END;/

/* Altering user table to add role column*/
alter table users 
add role varchar2(15) default 'customer' NOT NULL;

/* creating category table */
CREATE TABLE CATEGORIES 
(
  ID NUMBER(3) NOT NULL 
, PARENT_ID NUMBER(3) DEFAULT NULL 
, CATEGORY VARCHAR2(50) NOT NULL 
, PHOTO VARCHAR2(30 BYTE) 
, CONSTRAINT CATEGORIES_PK PRIMARY KEY 
  (
    ID 
  )
  ENABLE 
);

/* altering categories table to add foreign key to parent_id*/

ALTER TABLE CATEGORIES
ADD CONSTRAINT CATEGORIES_CATEGORIES_FK1 FOREIGN KEY
(
  PARENT_ID 
)
REFERENCES CATEGORIES
(
  ID 
)
ON DELETE CASCADE ENABLE;

/* create sequence for CATEGORIES table */
CREATE SEQUENCE CATEGORIES_SEQ;

/* create trigger for CATEGORIES table */
create or replace 
TRIGGER CATEGORY_ON_INSERT BEFORE INSERT ON CATEGORIES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF :NEW.ID IS NULL THEN
      SELECT CATEGORIES_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;


CREATE TABLE PRODUCTS 
(
  PRODID NUMBER NOT NULL 
, PNAME VARCHAR2(40) NOT NULL 
, PCAT VARCHAR2(40) NOT NULL 
, PRICE NUMBER(15, 2) NOT NULL 
, DISC_PRICE NUMBER(15, 2) NOT NULL 
, REMARKS VARCHAR2(40) NOT NULL 
, DESCR CLOB NOT NULL
, CREATE_DATE timestamp default systimestamp NOT NULL
, PHOTO VARCHAR2(200) NOT NULL 
, PARENT_ID NUMBER NOT NULL  
,CONSTRAINT TABLE1_PK PRIMARY KEY 
  (
    PRODID 
  )
  ENABLE 
);
CREATE SEQUENCE PRODUCTS_SEQ;
/* create trigger for CATEGORIES table */
create or replace 
TRIGGER PRODUCT_ON_INSERT BEFORE INSERT ON PRODUCTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF :NEW.PRODID IS NULL THEN
      SELECT PRODUCTS_SEQ.NEXTVAL INTO :NEW.PRODID FROM DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;







ALTER TABLE PRODUCTS 
ADD (PARENT_ID NUMBER );

ALTER TABLE PRODUCTS
ADD CONSTRAINT PRODUCTS_CATEGORIES_FK1 FOREIGN KEY
(
  PARENT_ID 
)
REFERENCES CATEGORIES
(
  ID 
)
ENABLE;

-- updation

CREATE TABLE CUST_DETAILS 
(
  USERID NUMBER(6, 0) NOT NULL 
, FNAME VARCHAR2(30) NOT NULL 
, LNAME VARCHAR2(20) NOT NULL 
, EMAIL VARCHAR2(60) NOT NULL 
, ADDRESS1 CLOB NOT NULL 
, ADDRESS2 CLOB 
, COUNTRY VARCHAR2(20) NOT NULL 
, STATE VARCHAR2(20) NOT NULL 
, CITY VARCHAR2(20) NOT NULL 
, PIN NUMBER(9, 0) NOT NULL 
, MOBILE NUMBER(10, 0) NOT NULL 
, ADDTYPE VARCHAR2(10) NOT NULL 
, CONSTRAINT CUST_DETAILS_PK PRIMARY KEY 
  (
    USERID 
  )
  ENABLE 
);

CREATE TABLE ORDERS 
(
  ORDER_ID          VARCHAR2(100 BYTE) NOT NULL 
, USER_ID           NUMBER(10, 0) NOT NULL 
, ORDER_AMOUNT      VARCHAR2(100 BYTE) NOT NULL 
, ORDER_DATE        TIMESTAMP(6) DEFAULT systimestamp NOT NULL 
, PAYMENT_STATUS      VARCHAR2(20 BYTE) DEFAULT 'Pending' 
, ORDER_RECIEPT     VARCHAR2(100 BYTE) 
, CONSTRAINT TABLE1_PK1 PRIMARY KEY 
  (
    ORDER_ID 
  )
  ENABLE 
) ;

ALTER TABLE ORDERS
ADD CONSTRAINT ORDERS_USERS_FK1 FOREIGN KEY
(
  USER_ID 
)
REFERENCES USERS
(
  USERID 
)
ON DELETE CASCADE ENABLE;

CREATE TABLE ORDER_DETAILS 
(
  ORDER_ID VARCHAR2(100 BYTE) NOT NULL 
, PROD_ID VARCHAR2(100 BYTE) NOT NULL 
, PROD_NAME VARCHAR2(250 BYTE) NOT NULL 
, PROD_PRICE VARCHAR2(100 BYTE) NOT NULL 
, PROD_QTY NUMBER(10, 0) NOT NULL 
, ID NUMBER(10, 0) NOT NULL 
, CONSTRAINT ORDER_DETAILS_PK PRIMARY KEY 
  (
    ID 
  )
  ENABLE 
);


ALTER TABLE ORDER_DETAILS
ADD CONSTRAINT ORDER_DETAILS_ORDERS_FK1 FOREIGN KEY
(
  ORDER_ID 
)
REFERENCES ORDERS
(
  ORDER_ID 
)
ON DELETE CASCADE ENABLE;

CREATE SEQUENCE order_details_id_seq;
 
CREATE TRIGGER order_details_on_insert
BEFORE INSERT ON order_details
FOR EACH ROW
BEGIN
  SELECT order_details_id_seq.nextval
  INTO :new.id
  FROM dual;
END;

ALTER TABLE ORDERS 
ADD (PAYMENT_ID VARCHAR2(100) );

ALTER TABLE ORDERS 
ADD (ORDER_STATUS VARCHAR2(50) DEFAULT 'Pending' NOT NULL);
